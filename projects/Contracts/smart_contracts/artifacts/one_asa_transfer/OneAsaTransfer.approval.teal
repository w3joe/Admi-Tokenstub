#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0
    bytecblock "owner"
    // smart_contracts/one_asa_transfer/contract.algo.ts:6
    // export class OneAsaTransfer extends Contract {
    txn NumAppArgs
    bz main_bare_routing@7
    pushbytess 0x4c5c61ba 0x44f54cbc // method "create()void", method "transfer(uint64,byte[])void"
    txna ApplicationArgs 0
    match main_create_route@3 main_transfer_route@4

main_after_if_else@11:
    // smart_contracts/one_asa_transfer/contract.algo.ts:6
    // export class OneAsaTransfer extends Contract {
    intc_1 // 0
    return

main_transfer_route@4:
    // smart_contracts/one_asa_transfer/contract.algo.ts:18
    // public transfer(assetId: uint64, receiver: bytes): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/one_asa_transfer/contract.algo.ts:6
    // export class OneAsaTransfer extends Contract {
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    extract 2 0
    // smart_contracts/one_asa_transfer/contract.algo.ts:18
    // public transfer(assetId: uint64, receiver: bytes): void {
    callsub transfer
    intc_0 // 1
    return

main_create_route@3:
    // smart_contracts/one_asa_transfer/contract.algo.ts:11
    // public create(): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub create
    intc_0 // 1
    return

main_bare_routing@7:
    // smart_contracts/one_asa_transfer/contract.algo.ts:6
    // export class OneAsaTransfer extends Contract {
    txn OnCompletion
    bnz main_after_if_else@11
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// smart_contracts/one_asa_transfer/contract.algo.ts::OneAsaTransfer.create() -> void:
create:
    // smart_contracts/one_asa_transfer/contract.algo.ts:8
    // owner = GlobalState<bytes>({ key: 'owner' })
    bytec_0 // "owner"
    // smart_contracts/one_asa_transfer/contract.algo.ts:13
    // this.owner.value = Txn.sender.bytes
    txn Sender
    app_global_put
    retsub


// smart_contracts/one_asa_transfer/contract.algo.ts::OneAsaTransfer.transfer(assetId: uint64, receiver: bytes) -> void:
transfer:
    // smart_contracts/one_asa_transfer/contract.algo.ts:18
    // public transfer(assetId: uint64, receiver: bytes): void {
    proto 2 0
    // smart_contracts/one_asa_transfer/contract.algo.ts:20
    // assert(Txn.sender.bytes.equals(this.owner.value))
    txn Sender
    // smart_contracts/one_asa_transfer/contract.algo.ts:8
    // owner = GlobalState<bytes>({ key: 'owner' })
    intc_1 // 0
    bytec_0 // "owner"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/one_asa_transfer/contract.algo.ts:20
    // assert(Txn.sender.bytes.equals(this.owner.value))
    ==
    assert
    // smart_contracts/one_asa_transfer/contract.algo.ts:23-28
    // assetTransfer({
    //   xferAsset: assetId,
    //   // Transfer exactly 1 unit (Uint64 helper creates the proper uint64 type)
    //   assetAmount: Uint64(1),
    //   assetReceiver: receiver,
    // }).submit()
    itxn_begin
    frame_dig -1
    itxn_field AssetReceiver
    // smart_contracts/one_asa_transfer/contract.algo.ts:26
    // assetAmount: Uint64(1),
    intc_0 // 1
    itxn_field AssetAmount
    frame_dig -2
    itxn_field XferAsset
    // smart_contracts/one_asa_transfer/contract.algo.ts:23-28
    // assetTransfer({
    //   xferAsset: assetId,
    //   // Transfer exactly 1 unit (Uint64 helper creates the proper uint64 type)
    //   assetAmount: Uint64(1),
    //   assetReceiver: receiver,
    // }).submit()
    pushint 4 // 4
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    itxn_submit
    retsub
