/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"OneAsaTransfer","structs":{},"methods":[{"name":"create","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"transfer","args":[{"type":"uint64","name":"assetId"},{"type":"byte[]","name":"receiver"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":1},"local":{"ints":0,"bytes":0}},"keys":{"global":{"owner":{"keyType":"AVMString","valueType":"AVMBytes","key":"b3duZXI="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[44,66],"errorMessage":"OnCompletion is not NoOp"},{"pc":[83],"errorMessage":"can only call when creating"},{"pc":[47,69],"errorMessage":"can only call when not creating"},{"pc":[99],"errorMessage":"check GlobalState exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMSAwCiAgICBieXRlY2Jsb2NrICJvd25lciIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vbmVfYXNhX3RyYW5zZmVyL2NvbnRyYWN0LmFsZ28udHM6NgogICAgLy8gZXhwb3J0IGNsYXNzIE9uZUFzYVRyYW5zZmVyIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIE51bUFwcEFyZ3MKICAgIGJ6IG1haW5fYmFyZV9yb3V0aW5nQDcKICAgIHB1c2hieXRlc3MgMHg0YzVjNjFiYSAweDQ0ZjU0Y2JjIC8vIG1ldGhvZCAiY3JlYXRlKCl2b2lkIiwgbWV0aG9kICJ0cmFuc2Zlcih1aW50NjQsYnl0ZVtdKXZvaWQiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX2NyZWF0ZV9yb3V0ZUAzIG1haW5fdHJhbnNmZXJfcm91dGVANAoKbWFpbl9hZnRlcl9pZl9lbHNlQDExOgogICAgLy8gc21hcnRfY29udHJhY3RzL29uZV9hc2FfdHJhbnNmZXIvY29udHJhY3QuYWxnby50czo2CiAgICAvLyBleHBvcnQgY2xhc3MgT25lQXNhVHJhbnNmZXIgZXh0ZW5kcyBDb250cmFjdCB7CiAgICBpbnRjXzEgLy8gMAogICAgcmV0dXJuCgptYWluX3RyYW5zZmVyX3JvdXRlQDQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvb25lX2FzYV90cmFuc2Zlci9jb250cmFjdC5hbGdvLnRzOjE4CiAgICAvLyBwdWJsaWMgdHJhbnNmZXIoYXNzZXRJZDogdWludDY0LCByZWNlaXZlcjogYnl0ZXMpOiB2b2lkIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL29uZV9hc2FfdHJhbnNmZXIvY29udHJhY3QuYWxnby50czo2CiAgICAvLyBleHBvcnQgY2xhc3MgT25lQXNhVHJhbnNmZXIgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICBleHRyYWN0IDIgMAogICAgLy8gc21hcnRfY29udHJhY3RzL29uZV9hc2FfdHJhbnNmZXIvY29udHJhY3QuYWxnby50czoxOAogICAgLy8gcHVibGljIHRyYW5zZmVyKGFzc2V0SWQ6IHVpbnQ2NCwgcmVjZWl2ZXI6IGJ5dGVzKTogdm9pZCB7CiAgICBjYWxsc3ViIHRyYW5zZmVyCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2NyZWF0ZV9yb3V0ZUAzOgogICAgLy8gc21hcnRfY29udHJhY3RzL29uZV9hc2FfdHJhbnNmZXIvY29udHJhY3QuYWxnby50czoxMQogICAgLy8gcHVibGljIGNyZWF0ZSgpOiB2b2lkIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBjcmVhdGUKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fYmFyZV9yb3V0aW5nQDc6CiAgICAvLyBzbWFydF9jb250cmFjdHMvb25lX2FzYV90cmFuc2Zlci9jb250cmFjdC5hbGdvLnRzOjYKICAgIC8vIGV4cG9ydCBjbGFzcyBPbmVBc2FUcmFuc2ZlciBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIGJueiBtYWluX2FmdGVyX2lmX2Vsc2VAMTEKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIGNyZWF0aW5nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgoKLy8gc21hcnRfY29udHJhY3RzL29uZV9hc2FfdHJhbnNmZXIvY29udHJhY3QuYWxnby50czo6T25lQXNhVHJhbnNmZXIuY3JlYXRlKCkgLT4gdm9pZDoKY3JlYXRlOgogICAgLy8gc21hcnRfY29udHJhY3RzL29uZV9hc2FfdHJhbnNmZXIvY29udHJhY3QuYWxnby50czo4CiAgICAvLyBvd25lciA9IEdsb2JhbFN0YXRlPGJ5dGVzPih7IGtleTogJ293bmVyJyB9KQogICAgYnl0ZWNfMCAvLyAib3duZXIiCiAgICAvLyBzbWFydF9jb250cmFjdHMvb25lX2FzYV90cmFuc2Zlci9jb250cmFjdC5hbGdvLnRzOjEzCiAgICAvLyB0aGlzLm93bmVyLnZhbHVlID0gVHhuLnNlbmRlci5ieXRlcwogICAgdHhuIFNlbmRlcgogICAgYXBwX2dsb2JhbF9wdXQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9vbmVfYXNhX3RyYW5zZmVyL2NvbnRyYWN0LmFsZ28udHM6Ok9uZUFzYVRyYW5zZmVyLnRyYW5zZmVyKGFzc2V0SWQ6IHVpbnQ2NCwgcmVjZWl2ZXI6IGJ5dGVzKSAtPiB2b2lkOgp0cmFuc2ZlcjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vbmVfYXNhX3RyYW5zZmVyL2NvbnRyYWN0LmFsZ28udHM6MTgKICAgIC8vIHB1YmxpYyB0cmFuc2Zlcihhc3NldElkOiB1aW50NjQsIHJlY2VpdmVyOiBieXRlcyk6IHZvaWQgewogICAgcHJvdG8gMiAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvb25lX2FzYV90cmFuc2Zlci9jb250cmFjdC5hbGdvLnRzOjIwCiAgICAvLyBhc3NlcnQoVHhuLnNlbmRlci5ieXRlcy5lcXVhbHModGhpcy5vd25lci52YWx1ZSkpCiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvb25lX2FzYV90cmFuc2Zlci9jb250cmFjdC5hbGdvLnRzOjgKICAgIC8vIG93bmVyID0gR2xvYmFsU3RhdGU8Ynl0ZXM+KHsga2V5OiAnb3duZXInIH0pCiAgICBpbnRjXzEgLy8gMAogICAgYnl0ZWNfMCAvLyAib3duZXIiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL29uZV9hc2FfdHJhbnNmZXIvY29udHJhY3QuYWxnby50czoyMAogICAgLy8gYXNzZXJ0KFR4bi5zZW5kZXIuYnl0ZXMuZXF1YWxzKHRoaXMub3duZXIudmFsdWUpKQogICAgPT0KICAgIGFzc2VydAogICAgLy8gc21hcnRfY29udHJhY3RzL29uZV9hc2FfdHJhbnNmZXIvY29udHJhY3QuYWxnby50czoyMy0yOAogICAgLy8gYXNzZXRUcmFuc2Zlcih7CiAgICAvLyAgIHhmZXJBc3NldDogYXNzZXRJZCwKICAgIC8vICAgLy8gVHJhbnNmZXIgZXhhY3RseSAxIHVuaXQgKFVpbnQ2NCBoZWxwZXIgY3JlYXRlcyB0aGUgcHJvcGVyIHVpbnQ2NCB0eXBlKQogICAgLy8gICBhc3NldEFtb3VudDogVWludDY0KDEpLAogICAgLy8gICBhc3NldFJlY2VpdmVyOiByZWNlaXZlciwKICAgIC8vIH0pLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICBmcmFtZV9kaWcgLTEKICAgIGl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgogICAgLy8gc21hcnRfY29udHJhY3RzL29uZV9hc2FfdHJhbnNmZXIvY29udHJhY3QuYWxnby50czoyNgogICAgLy8gYXNzZXRBbW91bnQ6IFVpbnQ2NCgxKSwKICAgIGludGNfMCAvLyAxCiAgICBpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CiAgICBmcmFtZV9kaWcgLTIKICAgIGl0eG5fZmllbGQgWGZlckFzc2V0CiAgICAvLyBzbWFydF9jb250cmFjdHMvb25lX2FzYV90cmFuc2Zlci9jb250cmFjdC5hbGdvLnRzOjIzLTI4CiAgICAvLyBhc3NldFRyYW5zZmVyKHsKICAgIC8vICAgeGZlckFzc2V0OiBhc3NldElkLAogICAgLy8gICAvLyBUcmFuc2ZlciBleGFjdGx5IDEgdW5pdCAoVWludDY0IGhlbHBlciBjcmVhdGVzIHRoZSBwcm9wZXIgdWludDY0IHR5cGUpCiAgICAvLyAgIGFzc2V0QW1vdW50OiBVaW50NjQoMSksCiAgICAvLyAgIGFzc2V0UmVjZWl2ZXI6IHJlY2VpdmVyLAogICAgLy8gfSkuc3VibWl0KCkKICAgIHB1c2hpbnQgNCAvLyA0CiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzEgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGl0eG5fc3VibWl0CiAgICByZXRzdWIK","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiACAQAmAQVvd25lcjEbQQA5ggIETFxhugRE9Uy8NhoAjgIAGAACI0MxGRREMRhENhoBFzYaAlcCAIgAHiJDMRkURDEYRIgADSJDMRlA/9cxGBREIkMoMQBniYoCADEAIyhlRBJEsYv/shQishKL/rIRgQSyECOyAbOJ","clear":"CoEBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the OneAsaTransfer contract
 */
export type OneAsaTransferArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'create()void': Record<string, never>
    'transfer(uint64,byte[])void': {
      assetId: bigint | number
      receiver: Uint8Array
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'create()void': []
    'transfer(uint64,byte[])void': [assetId: bigint | number, receiver: Uint8Array]
  }
}

/**
 * The return type for each method
 */
export type OneAsaTransferReturns = {
  'create()void': void
  'transfer(uint64,byte[])void': void
}

/**
 * Defines the types of available calls and state of the OneAsaTransfer smart contract.
 */
export type OneAsaTransferTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create()void' | 'create', {
      argsObj: OneAsaTransferArgs['obj']['create()void']
      argsTuple: OneAsaTransferArgs['tuple']['create()void']
      returns: OneAsaTransferReturns['create()void']
    }>
    & Record<'transfer(uint64,byte[])void' | 'transfer', {
      argsObj: OneAsaTransferArgs['obj']['transfer(uint64,byte[])void']
      argsTuple: OneAsaTransferArgs['tuple']['transfer(uint64,byte[])void']
      returns: OneAsaTransferReturns['transfer(uint64,byte[])void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        owner: BinaryState
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type OneAsaTransferSignatures = keyof OneAsaTransferTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type OneAsaTransferNonVoidMethodSignatures = keyof OneAsaTransferTypes['methods'] extends infer T ? T extends keyof OneAsaTransferTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the OneAsaTransfer smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends OneAsaTransferSignatures> = OneAsaTransferTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the OneAsaTransfer smart contract to the method's return type
 */
export type MethodReturn<TSignature extends OneAsaTransferSignatures> = OneAsaTransferTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = OneAsaTransferTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type OneAsaTransferCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type OneAsaTransferDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: OneAsaTransferCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the OneAsaTransfer smart contract
 */
export abstract class OneAsaTransferParamsFactory {
  /**
   * Constructs a no op call for the create()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static create(params: CallParams<OneAsaTransferArgs['obj']['create()void'] | OneAsaTransferArgs['tuple']['create()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'create()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the transfer(uint64,byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static transfer(params: CallParams<OneAsaTransferArgs['obj']['transfer(uint64,byte[])void'] | OneAsaTransferArgs['tuple']['transfer(uint64,byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'transfer(uint64,byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetId, params.args.receiver],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the OneAsaTransfer smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class OneAsaTransferFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `OneAsaTransferFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new OneAsaTransferClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new OneAsaTransferClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the OneAsaTransfer smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: OneAsaTransferDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new OneAsaTransferClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the OneAsaTransfer smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the OneAsaTransfer smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the OneAsaTransfer smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new OneAsaTransferClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the OneAsaTransfer smart contract
 */
export class OneAsaTransferClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `OneAsaTransferClient`
   *
   * @param appClient An `AppClient` instance which has been created with the OneAsaTransfer app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `OneAsaTransferClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends OneAsaTransferNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `OneAsaTransferClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<OneAsaTransferClient> {
    return new OneAsaTransferClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `OneAsaTransferClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<OneAsaTransferClient> {
    return new OneAsaTransferClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the OneAsaTransfer smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the OneAsaTransfer smart contract using the `create()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    create: (params: CallParams<OneAsaTransferArgs['obj']['create()void'] | OneAsaTransferArgs['tuple']['create()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(OneAsaTransferParamsFactory.create(params))
    },

    /**
     * Makes a call to the OneAsaTransfer smart contract using the `transfer(uint64,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    transfer: (params: CallParams<OneAsaTransferArgs['obj']['transfer(uint64,byte[])void'] | OneAsaTransferArgs['tuple']['transfer(uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OneAsaTransferParamsFactory.transfer(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the OneAsaTransfer smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the OneAsaTransfer smart contract using the `create()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    create: (params: CallParams<OneAsaTransferArgs['obj']['create()void'] | OneAsaTransferArgs['tuple']['create()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(OneAsaTransferParamsFactory.create(params))
    },

    /**
     * Makes a call to the OneAsaTransfer smart contract using the `transfer(uint64,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    transfer: (params: CallParams<OneAsaTransferArgs['obj']['transfer(uint64,byte[])void'] | OneAsaTransferArgs['tuple']['transfer(uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OneAsaTransferParamsFactory.transfer(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the OneAsaTransfer smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the OneAsaTransfer smart contract using the `create()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    create: async (params: CallParams<OneAsaTransferArgs['obj']['create()void'] | OneAsaTransferArgs['tuple']['create()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(OneAsaTransferParamsFactory.create(params))
      return {...result, return: result.return as unknown as (undefined | OneAsaTransferReturns['create()void'])}
    },

    /**
     * Makes a call to the OneAsaTransfer smart contract using the `transfer(uint64,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    transfer: async (params: CallParams<OneAsaTransferArgs['obj']['transfer(uint64,byte[])void'] | OneAsaTransferArgs['tuple']['transfer(uint64,byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OneAsaTransferParamsFactory.transfer(params))
      return {...result, return: result.return as unknown as (undefined | OneAsaTransferReturns['transfer(uint64,byte[])void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new OneAsaTransferClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current OneAsaTransfer app
   */
  state = {
    /**
     * Methods to access global state for the current OneAsaTransfer app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          owner: new BinaryStateValue(result.owner),
        }
      },
      /**
       * Get the current value of the owner key in global state
       */
      owner: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("owner")) as Uint8Array | undefined) },
    },
  }

  public newGroup(): OneAsaTransferComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a create()void method call against the OneAsaTransfer contract
       */
      create(params: CallParams<OneAsaTransferArgs['obj']['create()void'] | OneAsaTransferArgs['tuple']['create()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.create(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a transfer(uint64,byte[])void method call against the OneAsaTransfer contract
       */
      transfer(params: CallParams<OneAsaTransferArgs['obj']['transfer(uint64,byte[])void'] | OneAsaTransferArgs['tuple']['transfer(uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.transfer(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the OneAsaTransfer contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as OneAsaTransferComposer
  }
}
export type OneAsaTransferComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the create()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  create(params?: CallParams<OneAsaTransferArgs['obj']['create()void'] | OneAsaTransferArgs['tuple']['create()void']>): OneAsaTransferComposer<[...TReturns, OneAsaTransferReturns['create()void'] | undefined]>

  /**
   * Calls the transfer(uint64,byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  transfer(params?: CallParams<OneAsaTransferArgs['obj']['transfer(uint64,byte[])void'] | OneAsaTransferArgs['tuple']['transfer(uint64,byte[])void']>): OneAsaTransferComposer<[...TReturns, OneAsaTransferReturns['transfer(uint64,byte[])void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the OneAsaTransfer smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): OneAsaTransferComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): OneAsaTransferComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<OneAsaTransferComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<OneAsaTransferComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<OneAsaTransferComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<OneAsaTransferComposerResults<TReturns>>
}
export type OneAsaTransferComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

